#!/usr/bin/make -f

export VERSION := $(shell cat VERSION)

export DOCKER_GITCOMMIT := v$(VERSION)

# temporary build path (see http://golang.org/doc/code.html#GOPATH)
OUR_GOPATH := $(CURDIR)/.gopath
export GOPATH := $(OUR_GOPATH)
export GOCACHE := $(OUR_GOPATH)/.cache
export GO111MODULE := off
export GOPROXY := off

# prefer our custom-built Go explicitly (which will be built first thing in override_dh_auto_build)
OUR_GOROOT := $(CURDIR)/golang
export PATH := $(OUR_GOROOT)/bin:$(PATH)

# AppArmor can be optionally used in Debian and is there by default in Ubuntu, so we need support for it compiled into our binary
# same story with SELinux
export DOCKER_BUILDTAGS := apparmor seccomp selinux

ifneq (,$(filter parallel=%, $(DEB_BUILD_OPTIONS)))
	NUMJOBS := $(patsubst parallel=%, %, $(filter parallel=%, $(DEB_BUILD_OPTIONS)))
	MAKEFLAGS += -j '$(NUMJOBS)'
endif

override_dh_gencontrol:
	# if we're on Ubuntu, we need to Recommends: apparmor
	echo 'apparmor:Recommends=$(shell dpkg-vendor --is Ubuntu && echo apparmor)' >> debian/docker-tianon.substvars
	dh_gencontrol

override_dh_auto_configure:
	# set up GOPATH symlink farm
	# runc
	mkdir -p '$(OUR_GOPATH)/src/github.com/opencontainers'
	ln -sfT '$(CURDIR)/runc' '$(OUR_GOPATH)/src/github.com/opencontainers/runc'
	# containerd
	mkdir -p '$(OUR_GOPATH)/src/github.com/containerd'
	ln -sfT '$(CURDIR)/containerd' '$(OUR_GOPATH)/src/github.com/containerd/containerd'
	# libnetwork
	mkdir -p '$(OUR_GOPATH)/src/github.com/docker'
	ln -sfT '$(CURDIR)/libnetwork' '$(OUR_GOPATH)/src/github.com/docker/libnetwork'
	# cli
	mkdir -p '$(OUR_GOPATH)/src/github.com/docker'
	ln -sfT '$(CURDIR)/components/cli' '$(OUR_GOPATH)/src/github.com/docker/cli'
	# engine
	mkdir -p '$(OUR_GOPATH)/src/github.com/docker'
	ln -sfT '$(CURDIR)/components/engine' '$(OUR_GOPATH)/src/github.com/docker/docker'

override_dh_auto_build-arch: _build-runc _build-containerd _build-tini _build-proxy _build-cli _build-manpages _build-engine
	@#

# several "supporting binaries" need to be built and installed
# (https://github.com/docker/docker-ce/blob/v17.12.1-ce/components/engine/hack/dockerfile/install-binaries.sh)

_build-golang:
	# golang
	@# for some reason, go1.10.8 includes empty "gocache" and "tmp" directories inside the tarball... (which screws up dpkg-deb's orig handling): https://fossies.org/diffs/go/1.10.7_vs_1.10.8/#Directories
	cd '$(OUR_GOROOT)/src' \
		&& GOROOT_BOOTSTRAP="$$(env -i go env GOROOT)" \
			GOOS="$$(env -i go env GOOS)" \
			GOARCH="$$(env -i go env GOARCH)" \
			GO386="$$(env -i go env GO386)" \
			GOARM="$$(env -i go env GOARM)" \
			GOHOSTOS="$$(env -i go env GOHOSTOS)" \
			GOHOSTARCH="$$(env -i go env GOHOSTARCH)" \
			./make.bash
	[ "$$(readlink -f "$$(go env GOROOT)")" = "$$(readlink -f '$(OUR_GOROOT)')" ] && go version

_build-runc: _build-golang
	cd '$(OUR_GOPATH)/src/github.com/opencontainers/runc' \
		&& make \
			BUILDTAGS='seccomp apparmor selinux' \
			COMMIT='$(shell eval "$$(grep -E '^RUNC_COMMIT=' components/engine/hack/dockerfile/install/runc.installer)" && echo "$$RUNC_COMMIT")'
	# (we use the exact commit Docker does, so we pass that value to "runc" when we build it)

_build-containerd: _build-golang
	cd '$(OUR_GOPATH)/src/github.com/containerd/containerd' \
		&& make \
			LDFLAGS='' \
			VERSION='docker-$(VERSION)' \
			REVISION='$(shell eval "$$(grep -E '^CONTAINERD_COMMIT=' components/engine/hack/dockerfile/install/containerd.installer)" && echo "$$CONTAINERD_COMMIT")'
	# (we use the exact commit Docker does, so we pass that value to "containerd" when we build it)

_build-tini: # (docker-init)
	mkdir -p tini/build
	cd tini/build \
		&& cmake .. \
		&& make tini-static

_build-proxy: _build-golang # (from libnetwork)
	go build -o libnetwork/docker-proxy github.com/docker/libnetwork/cmd/proxy

_build-cli: _build-golang
	DISABLE_WARN_OUTSIDE_CONTAINER=1 \
		make -C components/cli \
			LDFLAGS='' \
			VERSION='$(VERSION)' \
			GITCOMMIT='$(DOCKER_GITCOMMIT)' \
			dynbinary

# https://github.com/docker/docker-ce/blob/v17.12.1-ce/components/cli/scripts/docs/generate-man.sh
# (replacing hard-coded "/tmp/gen-manpages" with "debian/tmp/gen-manpages")
_build-manpages: _build-golang
	cd '$(OUR_GOPATH)/src/github.com/docker/cli' \
		&& export PATH='$(OUR_GOPATH)/bin':"$$PATH" \
		&& sed 's!/tmp/gen-manpages!$(CURDIR)/debian/tmp/gen-manpages!g' scripts/docs/generate-man.sh \
			| bash

_build-engine: _build-golang
	cd components/engine \
		&& PRODUCT=docker ./hack/make.sh dynbinary

# basic smoke test to ensure binaries built successfully
# (especially since their tests are _really_ involved)
override_dh_auto_test-arch:
	# runc
	./runc/runc --version
	# containerd
	./containerd/bin/containerd --version
	@# "containerd-shim" has no version flag
	./containerd/bin/ctr --version
	# tini
	./tini/build/tini-static --version
	# cli
	./components/cli/build/docker --version
	# engine
	./components/engine/bundles/latest/dynbinary-daemon/dockerd --version

override_dh_strip:
	# Go has lots of problems with stripping, so just don't

override_dh_auto_install:
	# we use dh_install / dh-exec for installing files where they need to be

override_dh_installinit:
	# use "docker" as our service name, not "docker-tianon"
	dh_installinit --name=docker

override_dh_installudev:
	# use priority z80 to match the upstream priority of 80
	dh_installudev --priority=z80

override_dh_install:
	dh_install
	dh_apparmor --profile-name=docker-tianon -pdocker-tianon

override_dh_shlibdeps:
	dh_shlibdeps --dpkg-shlibdeps-params=--ignore-missing-info

override_dh_auto_clean:
	@# stop debhelper from doing "make clean"

%:
	dh $@ --with=bash-completion,systemd
